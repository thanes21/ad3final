This is a highly informative pie chart:
```{r}
# Hadley (and Joel)'s favourite pie chart
df <- data.frame(
variable = c("does not resemble", "resembles"),
value = c(20, 80)
)
ggplot(df, aes(x = "", y = value, fill = variable)) +
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values = c("red", "yellow")) +
coord_polar("y", start = 2*pi/3) +
labs(title = "Pac Man")
```
install.packages("ggplot2")
install.packages("dplyr")
install.packages("knitr")
install.packages("knitr")
---
title: "Data Visualizations"
author: "Chen Zhao"
date: "February 14, 2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("ggplot")
library("knitr")
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("ggplot2")
---
title: "Data Visualizations"
author: "Chen Zhao"
date: "February 14, 2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
library("dplyr")
library("ggplot")
library("knitr")
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Intro Survey Analysis"
author: "Iman Fanboys"
date: "2/20/2017"
output: html_document
---
``` {r echo=FALSE, message=FALSE}
data <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
library('dplyr')
library('ggplot2')
```
## Summary Statistics Description
This section will give an overview of the data using summary statistics about how the students responded to the survey, in regards, mainly, to technical experience.
``` {r echo=FALSE, message=FALSE}
prog.experience <- data %>%
group_by(Programming.Experience) %>%
summarize(
Frequency = n())
max.prog <- prog.experience %>% filter(Frequency == max(Frequency))
r.experience <- data %>%
group_by(R.Language.Experience) %>%
summarize(
Frequency = n()) %>%
mutate(Percent = round((Frequency / nrow(data)) * 100))
com.line.experience <- data %>%
group_by(Command.Line.Experience) %>%
summarize(
Frequency = n())
max.com <- com.line.experience %>% filter(Frequency == max(Frequency))
web.experience <- data %>%
group_by(Web.Programming.Experience) %>%
summarize(
Frequency = n()) %>%
mutate(Percent = round((Frequency / nrow(data)) * 100))
coffee <- data %>% summarize(median.cups = median(Cups.of.Coffee))
```
When asked about programming experience, the most common response students had was: `r max.prog[,1]`. When asked about the program R Studio, `r r.experience[1,3]`% of the class reported being "`r r.experience[1,1]`s", `r r.experience[2,3]`% of the class reported that they have "`r r.experience[2,1]`", and `r r.experience[3,3]`% of the class reported that they have "`r r.experience[3,1]`". When asked about command line experience, the most common response students had was: `r max.com[,1]`. When asked about web programming, `r web.experience[1,3]`% of the class reported being "`r web.experience[1,1]`s", `r web.experience[2,3]`% of the class reported being "`r web.experience[2,1]`s", and `r web.experience[3,3]`% of the class reported that they have "`r web.experience[3,1]`". The median amount of cups of coffee drank by the students on the day of the survey was `r coffee[1]`.
As stated in the paragraph above, most students in the Informatics 201 course had little to no experience in the programs used prior to taking the course.
***
## Response Statistics Table
This section reports the break-downs of technical experience among the survey respondents.
``` {r table, echo = FALSE}
#Function that takes in a data frame as a parameter and counts the occurance of each response, compiles it in a data frame, and returns the newly created data frame
count.responses <- function(responses) {
#Counts each response and stores it in a data frame
never <- filter(responses, responses[1] == "Never used it")
few <- filter(responses, responses[1] == "Used it a few times")
intermediate <- filter(responses, responses[1] == "Intermediate user")
expert <- filter(responses, responses[1] == "Expert user")
#Creates two lists, one for column names and the other of counts of responses
response <- c("Never used it", "Used it a few times", "Intermediate user", "Expert user")
n <- c(nrow(never), nrow(few), nrow(intermediate), nrow(expert))
#Creates and returns the data frame
counts <- data.frame(response, n, stringsAsFactors = FALSE)
return(counts)
}
#Calls the function to count responses for each skill
command.line <- select(data, Command.Line.Experience) %>% count.responses()
version.control <- select(data, Version.Control.Experience) %>% count.responses()
markdown <- select(data, Markdown.Experience) %>% count.responses()
r.language <- select(data, R.Language.Experience) %>% count.responses()
web.programming <- select(data, Web.Programming.Experience) %>% count.responses()
```
| Skill                  | Never used it          | Used it a few times    | Intermediate user      | Expert User            |
| ---------------------- | ---------------------- | ---------------------- | ---------------------- | ---------------------- |
| Command Line           |`r command.line[1,2]`   |`r command.line[2,2]`   |`r command.line[3,2]`   |`r command.line[4,2]`   |
| Version Control        |`r version.control[1,2]`|`r version.control[2,2]`|`r version.control[3,2]`|`r version.control[4,2]`|
| Markdown               |`r markdown[1,2]`       |`r markdown[2,2]`       |`r markdown[3,2]`       |`r markdown[4,2]`       |
| R Language             |`r r.language[1,2]`     |`r r.language[2,2]`     |`r r.language[3,2]`     |`r r.language[4,2]`     |
| Web Programming        |`r web.programming[1,2]`|`r web.programming[2,2]`|`r web.programming[3,2]`|`r web.programming[4,2]`|
As you can see, few respondents consider themselves experts in any field. The majority of respondents have never used or have only used these languages/skills a few times. This is expected as Info 201 is a course revolving around technical foundations.
***
## First Visualization
This graph shows the relationship between general programming experience and the operating system people use. It's also further divided by command line experience.
```{r first visualization, echo=FALSE, message=FALSE}
# Creates a graph showing the relationship between programming expreince and operating system
ggplot(data = data) +
# Creates a bar graph, divided by the operating system
geom_bar(map = aes(x = Programming.Experience, fill = Operating.System), position = "dodge") +
# Changes the x and y axis names and title
labs(x = "General Programming Experience",
y = "Count",
title = "Number of People Using a Certain Operating System",
subtitle = "Based On Programming Experience and Divided by Command Line Experience") +
# Gets rid of the vertical lines
theme(panel.grid.minor.x=element_blank(), panel.grid.major.x=element_blank()) +
# Changes the legend name
scale_fill_discrete(name = "Operating System")  +
# Moves the legend to the top
theme(legend.position = "top") +
# Changes the labels to something more readable
scale_x_discrete(labels = c("I have lots of experience with a programming language (e.g., CSE143+)" = "Lots",
"I have moderate experience with a programming language (e.g., CSE142)" = "Moderate",
"I've experimented with simple programming" = "Some",
"I've never written code" = "None")) +
# Divides the graphs into level of experience in command line
facet_wrap(~Command.Line.Experience)
# Calculates the number of people who are moderate programmers who have never used command line
num.moderate.programmers.no.command.line <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have moderate experience with a programming language (e.g., CSE142)") %>%
nrow()
# Calculates the number of people who are expert programmers who have never used command line
num.expert.programmers.no.command.line.experience <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have lots of experience with a programming language (e.g., CSE143+)") %>%
nrow()
```
What's interesting about this graph is that the largest group that has never used the command line are people with moderate programming experience. There are a total of `r num.moderate.programmers.no.command.line` people who are users with moderate programming that have never used the command line, and only `r num.expert.programmers.no.command.line.experience` people with lots of programming experience who have never used the command line. This graph shows that there are only Mac users who are expert users in command line. This is backed up with the fact that there are more Windows users with a lot of programming experience who have never used the command line than Mac users who also have a lot of programming experience. Lastsly, as to be expected, there are no users with programming experience who have experience using the command line.
***
```{r echo = FALSE}
```
setwd("C:/Users/zcchr/Desktop/info201/a7-collaboration-mrgmacan")
---
title: "Intro Survey Analysis"
author: "Iman Fanboys"
date: "2/20/2017"
output: html_document
---
``` {r echo=FALSE, message=FALSE}
data <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
library('dplyr')
library('ggplot2')
```
## Summary Statistics Description
This section will give an overview of the data using summary statistics about how the students responded to the survey, in regards, mainly, to technical experience.
``` {r echo=FALSE, message=FALSE}
prog.experience <- data %>%
group_by(Programming.Experience) %>%
summarize(
Frequency = n())
max.prog <- prog.experience %>% filter(Frequency == max(Frequency))
r.experience <- data %>%
group_by(R.Language.Experience) %>%
summarize(
Frequency = n()) %>%
mutate(Percent = round((Frequency / nrow(data)) * 100))
com.line.experience <- data %>%
group_by(Command.Line.Experience) %>%
summarize(
Frequency = n())
max.com <- com.line.experience %>% filter(Frequency == max(Frequency))
web.experience <- data %>%
group_by(Web.Programming.Experience) %>%
summarize(
Frequency = n()) %>%
mutate(Percent = round((Frequency / nrow(data)) * 100))
coffee <- data %>% summarize(median.cups = median(Cups.of.Coffee))
```
When asked about programming experience, the most common response students had was: `r max.prog[,1]`. When asked about the program R Studio, `r r.experience[1,3]`% of the class reported being "`r r.experience[1,1]`s", `r r.experience[2,3]`% of the class reported that they have "`r r.experience[2,1]`", and `r r.experience[3,3]`% of the class reported that they have "`r r.experience[3,1]`". When asked about command line experience, the most common response students had was: `r max.com[,1]`. When asked about web programming, `r web.experience[1,3]`% of the class reported being "`r web.experience[1,1]`s", `r web.experience[2,3]`% of the class reported being "`r web.experience[2,1]`s", and `r web.experience[3,3]`% of the class reported that they have "`r web.experience[3,1]`". The median amount of cups of coffee drank by the students on the day of the survey was `r coffee[1]`.
As stated in the paragraph above, most students in the Informatics 201 course had little to no experience in the programs used prior to taking the course.
***
## Response Statistics Table
This section reports the break-downs of technical experience among the survey respondents.
``` {r table, echo = FALSE}
#Function that takes in a data frame as a parameter and counts the occurance of each response, compiles it in a data frame, and returns the newly created data frame
count.responses <- function(responses) {
#Counts each response and stores it in a data frame
never <- filter(responses, responses[1] == "Never used it")
few <- filter(responses, responses[1] == "Used it a few times")
intermediate <- filter(responses, responses[1] == "Intermediate user")
expert <- filter(responses, responses[1] == "Expert user")
#Creates two lists, one for column names and the other of counts of responses
response <- c("Never used it", "Used it a few times", "Intermediate user", "Expert user")
n <- c(nrow(never), nrow(few), nrow(intermediate), nrow(expert))
#Creates and returns the data frame
counts <- data.frame(response, n, stringsAsFactors = FALSE)
return(counts)
}
#Calls the function to count responses for each skill
command.line <- select(data, Command.Line.Experience) %>% count.responses()
version.control <- select(data, Version.Control.Experience) %>% count.responses()
markdown <- select(data, Markdown.Experience) %>% count.responses()
r.language <- select(data, R.Language.Experience) %>% count.responses()
web.programming <- select(data, Web.Programming.Experience) %>% count.responses()
```
| Skill                  | Never used it          | Used it a few times    | Intermediate user      | Expert User            |
| ---------------------- | ---------------------- | ---------------------- | ---------------------- | ---------------------- |
| Command Line           |`r command.line[1,2]`   |`r command.line[2,2]`   |`r command.line[3,2]`   |`r command.line[4,2]`   |
| Version Control        |`r version.control[1,2]`|`r version.control[2,2]`|`r version.control[3,2]`|`r version.control[4,2]`|
| Markdown               |`r markdown[1,2]`       |`r markdown[2,2]`       |`r markdown[3,2]`       |`r markdown[4,2]`       |
| R Language             |`r r.language[1,2]`     |`r r.language[2,2]`     |`r r.language[3,2]`     |`r r.language[4,2]`     |
| Web Programming        |`r web.programming[1,2]`|`r web.programming[2,2]`|`r web.programming[3,2]`|`r web.programming[4,2]`|
As you can see, few respondents consider themselves experts in any field. The majority of respondents have never used or have only used these languages/skills a few times. This is expected as Info 201 is a course revolving around technical foundations.
***
## First Visualization
This graph shows the relationship between general programming experience and the operating system people use. It's also further divided by command line experience.
```{r first visualization, echo=FALSE, message=FALSE}
# Creates a graph showing the relationship between programming expreince and operating system
ggplot(data = data) +
# Creates a bar graph, divided by the operating system
geom_bar(map = aes(x = Programming.Experience, fill = Operating.System), position = "dodge") +
# Changes the x and y axis names and title
labs(x = "General Programming Experience",
y = "Count",
title = "Number of People Using a Certain Operating System",
subtitle = "Based On Programming Experience and Divided by Command Line Experience") +
# Gets rid of the vertical lines
theme(panel.grid.minor.x=element_blank(), panel.grid.major.x=element_blank()) +
# Changes the legend name
scale_fill_discrete(name = "Operating System")  +
# Moves the legend to the top
theme(legend.position = "top") +
# Changes the labels to something more readable
scale_x_discrete(labels = c("I have lots of experience with a programming language (e.g., CSE143+)" = "Lots",
"I have moderate experience with a programming language (e.g., CSE142)" = "Moderate",
"I've experimented with simple programming" = "Some",
"I've never written code" = "None")) +
# Divides the graphs into level of experience in command line
facet_wrap(~Command.Line.Experience)
# Calculates the number of people who are moderate programmers who have never used command line
num.moderate.programmers.no.command.line <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have moderate experience with a programming language (e.g., CSE142)") %>%
nrow()
# Calculates the number of people who are expert programmers who have never used command line
num.expert.programmers.no.command.line.experience <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have lots of experience with a programming language (e.g., CSE143+)") %>%
nrow()
```
What's interesting about this graph is that the largest group that has never used the command line are people with moderate programming experience. There are a total of `r num.moderate.programmers.no.command.line` people who are users with moderate programming that have never used the command line, and only `r num.expert.programmers.no.command.line.experience` people with lots of programming experience who have never used the command line. This graph shows that there are only Mac users who are expert users in command line. This is backed up with the fact that there are more Windows users with a lot of programming experience who have never used the command line than Mac users who also have a lot of programming experience. Lastsly, as to be expected, there are no users with programming experience who have experience using the command line.
***
## Second Visualization
This graph shows the relationship between general programming experience and the web-programming skills proficiency. It is also further divided by whether the student is interested in Informatics or not.
```{r first visualization, echo = FALSE}
ggplot(data = data) +
# Creates a bar graph, divided by the operating system
geom_bar(map = aes(x = Programming.Experience, fill = Operating.System), position = "dodge") +
# Changes the x and y axis names and title
labs(x = "General Programming Experience",
y = "Count",
title = "Number of People Using a Certain Operating System",
subtitle = "Based On Programming Experience and Divided by Command Line Experience") +
# Gets rid of the vertical lines
theme(panel.grid.minor.x=element_blank(), panel.grid.major.x=element_blank()) +
# Changes the legend name
scale_fill_discrete(name = "Operating System")  +
# Moves the legend to the top
theme(legend.position = "top") +
# Changes the labels to something more readable
scale_x_discrete(labels = c("I have lots of experience with a programming language (e.g., CSE143+)" = "Lots",
"I have moderate experience with a programming language (e.g., CSE142)" = "Moderate",
"I've experimented with simple programming" = "Some",
"I've never written code" = "None")) +
# Divides the graphs into level of experience in command line
facet_wrap(~Command.Line.Experience)
# Calculates the number of people who are moderate programmers who have never used command line
num.moderate.programmers.no.command.line <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have moderate experience with a programming language (e.g., CSE142)") %>%
nrow()
# Calculates the number of people who are expert programmers who have never used command line
num.expert.programmers.no.command.line.experience <- data %>%
filter(Command.Line.Experience == "Never used it") %>%
filter(Programming.Experience == "I have lots of experience with a programming language (e.g., CSE143+)") %>%
nrow()
```
data <- read.csv('data/intro-survey.csv', stringsAsFactors = FALSE)
library('dplyr')
library('ggplot2')
View(data)
# load the "shiny" library
install.packages("shiny")
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage` layout
ui <- fluidPage(
# Include a `titlePanel` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# Include a `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function in the documentation!
numericInput('price', label="Price (in dollars)", value=0, min=0),
# Include a `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label="Quantity", value=1, min=1),
# Include the word "Cost" strongly bolded
strong('Cost'),
# Include a `textOutput()` output of the calculated `cost`
textOutput('cost')
)
# Define a `server` function (with appropriate arguments)
server <- function(input, output){
# Assign a reactive `renderText()` function to the outputted `cost`
# The reactive expression should return the inputed `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0('$', input$price * input$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library("ggplot2")
library("dplyr")
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
?rm
load("C:/Users/zcchr/Documents/.RData")
setwd('/Users/zcchr/Desktop/info201/ad3final')
deployApp()
library("rsconnect")
setwd('/Users/zcchr/Desktop/info201/ad3final')
deployApp()
#Get list of games that user searches for and puts them in a data frame
games.response <- GET(paste0("http://www.speedrun.com/api/v1/games?name=", input$game, "&max=1"))
data <- fromJSON(content(games.response, "text"))
games <- data.frame(data[1]) %>% flatten()
#Selects the first game's ID (most like the users search)
game.id <- games$data.id[1]
game.name <- games$data.names.international[1]
output$name <- renderText(game.name)
#Queries API for all categories of the game
category.response <- GET(paste0("http://www.speedrun.com/api/v1/games/", game.id, "/categories"))
body <- fromJSON(content(category.response, "text"))
categories <- data.frame(body[1])
#Queries API again using the games ID to get leaderboards of each category
leaderboards.response <- GET(paste0("http://www.speedrun.com/api/v1/leaderboards/", game.id, "/category/", categories$data.id[1]))
body <- fromJSON(content(leaderboards.response, "text"))
leaderboards <- body$data$runs
leaderboards <- as.data.frame(leaderboards) %>% flatten()
library('shiny')
library('httr')
library('jsonlite')
library('dplyr')
server <- function(input, output) {
#Button is pressed, query API for the game the user entered
observeEvent(input$search, {
#Get list of games that user searches for and puts them in a data frame
games.response <- GET(paste0("http://www.speedrun.com/api/v1/games?name=", input$game, "&max=1"))
data <- fromJSON(content(games.response, "text"))
games <- data.frame(data[1]) %>% flatten()
#Selects the first game's ID (most like the users search)
game.id <- games$data.id[1]
game.name <- games$data.names.international[1]
output$name <- renderText(game.name)
#Queries API for all categories of the game
category.response <- GET(paste0("http://www.speedrun.com/api/v1/games/", game.id, "/categories"))
body <- fromJSON(content(category.response, "text"))
categories <- data.frame(body[1])
#Queries API again using the games ID to get leaderboards of each category
leaderboards.response <- GET(paste0("http://www.speedrun.com/api/v1/leaderboards/", game.id, "/category/", categories$data.id[1]))
body <- fromJSON(content(leaderboards.response, "text"))
leaderboards <- body$data$runs
leaderboards <- as.data.frame(leaderboards) %>% flatten()
games.response <- GET(paste0("http://www.speedrun.com/api/v1/games?name=", input$game, "&max=1"))
data <- fromJSON(content(games.response, "text"))
games <- data.frame(data[1]) %>% flatten()
#Selects the first game's ID (most like the users search)
game.id <- games$data.id[1]
game.name <- games$data.names.international[1]
output$name <- renderText(game.name)
#Queries API for all categories of the game
category.response <- GET(paste0("http://www.speedrun.com/api/v1/games/", game.id, "/categories"))
body <- fromJSON(content(category.response, "text"))
categories <- data.frame(body[1])
#Queries API again using the games ID to get leaderboards of each category
leaderboards.response <- GET(paste0("http://www.speedrun.com/api/v1/leaderboards/", game.id, "/category/", categories$data.id[1]))
body <- fromJSON(content(leaderboards.response, "text"))
leaderboards <- body$data$runs
leaderboards <- as.data.frame(leaderboards) %>% flatten()
games.response <- GET(paste0("http://www.speedrun.com/api/v1/games?name=", input$game, "&max=1"))
data <- fromJSON(content(games.response, "text"))
games <- data.frame(data[1]) %>% flatten()
library('shiny')
library('httr')
library('jsonlite')
library('dplyr')
games.response <- GET(paste0("http://www.speedrun.com/api/v1/games?name=", input$game, "&max=1"))
data <- fromJSON(content(games.response, "text"))
games <- data.frame(data[1]) %>% flatten()

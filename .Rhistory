# Store the result in a variable called `fruits.o`
fruits.o <- gsub("a", "o", fruits)
# Create a new variable `lyric.e` that is the `intro` combined with the new `fruits.e` ending
# Print out this variable
lyric.e <- print(intro + fruits.e)
# Print out the `intro` combined with the new `fruits.o` ending
# Create a variable `lyric` that contains the text "I like to eat apples and bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the `lyric`
# Use `?substr` to see more about this function
# Store the result in a variable called `intro`
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of `lyric`
# Hint: use `nchar()` to determine how many letters there are!
# Store the result in a variable called `fruits`
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or use `?gsub`)
# Store the result in a variable called `fruits.e`
fruits.e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits.o`
fruits.o <- gsub("a", "o", fruits)
# Create a new variable `lyric.e` that is the `intro` combined with the new `fruits.e` ending
# Print out this variable
lyric.e <- print(intro, fruits.e)
# Print out the `intro` combined with the new `fruits.o` ending
install.packages("stringr")
library("stringr")
AddThree <- function(value) {
return(value + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `AddThree` function
ten <- AddThree(7)
ten <- AddThree(7)
# Exercise 1: writing and executing functions
# Define a function `AddThree` that takes a single argument and
# returns a value 3 greater than that input
AddThree <- function(value) {
return(value + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `AddThree` function
ten <- AddThree(7)
# Define a function `ImperialToMetric` that takes in two arguments: a number of feet
# and a number of inches
# The function should return the total length in meters
ImperialToMetric <- function(feet, inches) {
total.inches(feet * 12 + inches)
return(total.inches * .0254)
}
# Create a variable `height.in.meters` by passing your height in imperial to the
# `ImperialToMetric` function
height.in.meters <- ImperialToMetric(5, 11)
ImperialToMetric <- function(feet, inches) {
total.inches(feet * 12 + inches)
return(total.inches * .0254)
height.in.meters <- ImperialToMetric(5, 11)
n <- 10:49
n
length(n)
?seq
?seq
# Exercise 4: Creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people next to you.
names <- c('Jack', 'Alex', 'Pampy')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use `length()` to get the number of elements in `n`
length(n)
# Create a vector `m` that contains the numbers 10 to 1. Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n.less.m <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1` increments.
# Store it in a variable `x`
x <- seq(-5, 10, .1)
# Create a vector `sin.wave` by calling the `sin()` function on each element in `x`.
sin.wave <- sin(x)
# Create a vector `cos.wave` by calling the `cos()` function on each element in `x`.
cos.wave <- cos(x)
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then adding `sin.wave`
wave <- sin.wave*cos.wave + sin.wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
plot(wave)
# Exercise 4: Creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people next to you.
names <- c('Jack', 'Alex', 'Pampy')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use `length()` to get the number of elements in `n`
length(n)
# Create a vector `m` that contains the numbers 10 to 1. Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n.less.m <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1` increments.
# Store it in a variable `x`
x <- seq(-5, 10, .1)
# Create a vector `sin.wave` by calling the `sin()` function on each element in `x`.
sin.wave <- sin(x)
# Create a vector `cos.wave` by calling the `cos()` function on each element in `x`.
cos.wave <- cos(x)
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then adding `sin.wave`
wave <- sin.wave*cos.wave + sin.wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Exercise 4: Creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people next to you.
names <- c('Jack', 'Alex', 'Pampy')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use `length()` to get the number of elements in `n`
length(n)
# Create a vector `m` that contains the numbers 10 to 1. Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n.less.m <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1` increments.
# Store it in a variable `x`
x <- seq(-5, 10, .1)
# Create a vector `sin.wave` by calling the `sin()` function on each element in `x`.
sin.wave <- sin(x)
# Create a vector `cos.wave` by calling the `cos()` function on each element in `x`.
cos.wave <- cos(x)
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then adding `sin.wave`
wave <- sin.wave*cos.wave + sin.wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Exercise 4: Creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people next to you.
names <- c('Jack', 'Alex', 'Pampy')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use `length()` to get the number of elements in `n`
length(n)
# Create a vector `m` that contains the numbers 10 to 1. Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n.less.m <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1` increments.
# Store it in a variable `x`
x <- seq(-5, 10, .1)
# Create a vector `sin.wave` by calling the `sin()` function on each element in `x`.
sin.wave <- sin(x)
# Create a vector `cos.wave` by calling the `cos()` function on each element in `x`.
cos.wave <- cos(x)
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then adding `sin.wave`
wave <- sin.wave*cos.wave + sin.wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
words <- c("dog", "water", "grapefruit", "beverage", "upset", "table")
words.of.the.day <- paste(words, "is the word of the day!")
print(words.of.the.day)
words.of.the.day <- paste("words", "is the word of the day!")
print(words.of.the.day)
a.f.words <- words[a:f]
a.f.words <- words[substring(words, 1, 1) <= "f"]
print(a.f.words)
g.m.words <- words["g" <= substring(word, 1, 1) <= "m"]
g.m.words <- words["m" <= substring(word, 1, 1) <= "f"]
g.m.words <- words[substring(words, 1, 1) >= "g"]
print(g.m.words)
g.m.words <- words["m" <= substring(words, 1, 1) >= "g"]
words.of.the.day <- paste0("'", words, "is the word of the day!")
print(words.of.the.day)
print(words.of.the.day)
words.of.the.day <- paste0("''", words, " is the word of the day! ")
print(words.of.the.day)
words.of.the.day <- paste0("", words, "'", " is the word of the day! ")
print(words.of.the.day)
words.of.the.day <- paste0("'", words, "'", " is the word of the day! ")
print(words.of.the.day)
words.of.the.day <- paste0("'", words, "'", " is the word of the day!")
g.m.words <- words[words > "f"]
print(g.m.words)
g.m.words <- words["n" > words > "f"]
g.m.words <- words[words > "f" & words < "n"]
print(g.m.words)
person <- list(name = "Ada", salary = 78000, in.union = TRUE)
person <- list(name = "Ada", salary = 78000, in.union = TRUE)
print(person)
person$salary
paste(person$name, person$in.union)
meals <- list(breakfast, lunch)
meals <- list(breakfast = my.breakfast, lunch = my.lunch)
# Create a vector of everything you ate for breakfast
my.breakfast <- c("burrito", "guac", "coffee")
# Create a vector of everything you ate for lunch
my.lunch <- c("soup", "kombucha")
# Create a list "meals" that has contains your `breakfast` and `lunch`
meals <- list(breakfast = my.breakfast, lunch = my.lunch)
meals$dinner <- "landy"
meals <- list(breakfast = my.breakfast, lunch = my.lunch)
meals$dinner <- "landy"
dinner <- meals$dinner
print(dinner)
meals$dinner <- c("landy")
dinner <- meals$dinner
meals[[lunch]]
meals[["lunch"]]
meals[["lunch"]]
early.meals <- meals[1:2]
early.meals
my.data <- data.frame(points, points.allowed, stringsAsFactors = FALSE)
# Exercise 1: Creating data frames
# Create a vector of the number of points the Seahawks scored in each game this
# season (google "Seahawks" for the info!)
points <- c(12, 3, 37, 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
points.allowed <- c(10, 9, 18, 17)
# Combine your two vectors into a dataframe
my.data <- data.frame(points, points.allowed, stringsAsFactors = FALSE)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
# Create a new column "won" which is TRUE if the Seahawks won
# Create a vector of the opponent names corresponding to the games played
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
my.data
my.data$diff <- points - points.allowed
my.data$diff
my.data <- data.frame(points, points.allowed, stringsAsFactors = FALSE)
my.data
view(my.data)
View(my.data)
# Exercise 1: Creating data frames
# Create a vector of the number of points the Seahawks scored in each game this
# season (google "Seahawks" for the info!)
points <- c(12, 3, 37, 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
points.allowed <- c(10, 9, 18, 17)
# Combine your two vectors into a dataframe
my.data <- data.frame(points, points.allowed, stringsAsFactors = FALSE)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
my.data$diff <- points - points.allowed
View(my.data)
# Create a new column "won" which is TRUE if the Seahawks won
# Create a vector of the opponent names corresponding to the games played
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
my.data$won <- my.data$diff > 0
my.data$won
View(my.data)
View(my.data)
rownames(my.data) <- opponent.names
# Exercise 1: Creating data frames
# Create a vector of the number of points the Seahawks scored in each game this
# season (google "Seahawks" for the info!)
points <- c(12, 3, 37, 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each game this season
points.allowed <- c(10, 9, 18, 17)
# Combine your two vectors into a dataframe
my.data <- data.frame(points, points.allowed, stringsAsFactors = FALSE)
# Create a new column "diff" that is the difference in points.
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
my.data$diff <- points - points.allowed
# Create a new column "won" which is TRUE if the Seahawks won
my.data$won <- my.data$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent.names <- c("Dolphins", "Rams", "49ers", "Jets")
# Assign your dataframe rownames of their opponents
rownames(my.data) <- opponent.names
# View your data frame to see how it has changed!
View(my.data)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- c("Employee 1":"Employee 100")
paste(employees)
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
# Create a column 'got.raise' that is TRUE if the person got a raise
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
# How many employees got a raise?
# What was the value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary increase?
### Bonus ###
# Write a .csv file of your salaries to your working directory
# For people who did not get a raise, how much money did they lose?
# Is that what you expected them to lose based on how you generated their salaries?
employees <- paste("Employee", 1:100)
employees <- paste("Employee", 1:100)
random.salaries <- runif(100, 40000, 50000)
random.salaries
new.salaries <- runif(100, -5000, 5000) + random.salaries
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100)
# Hint: use the `paste()` function to produce the list
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2014
# Use the `runif()` function to pick a random number between 40000 and 50000
random.salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2015 that have increased from 2014 by some amount
# Hint: use `runif()` to add a random number to 2014's salaries. Starting from a
# _negative_ number so that salaries may decrease!
new.salaries <- runif(100, -5000, 5000) + random.salaries
# Create a data.frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, random.salaries, new salaries, stringsAsFactors = FALSE)
# Create a column 'raise' that stores the size of the raise between 2014 and 2015
# Create a column 'got.raise' that is TRUE if the person got a raise
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2015 salary of employee 57
# How many employees got a raise?
# What was the value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary increase?
### Bonus ###
# Write a .csv file of your salaries to your working directory
# For people who did not get a raise, how much money did they lose?
# Is that what you expected them to lose based on how you generated their salaries?
View(salaries)
View(data.frame)
install.packages("nycflights13")
library("nycflights13")
View(data.frame)
View(head(flights))
nrows(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
View(flights)
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
# Exercise 4: DPLYR and flights data
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time gained in the air
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
install.packages("nycflights13")
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
View(flights)
flights <- arrange(flights, time.gained)
flights <- arrange(flights, desc(time.gained))
View(head(flights))
# For practice, repeat the last 2 steps in a single statement using the pipe operator
flights <- %>% mutate(time.gained = arr_delay - dep_delay) %>% arrange(desc(time.gained))
# Make a histogram of the amount of gain using the `hist()` function
hist(flights$time.gained)
flights <- flights %>% mutate(time.gained = arr_delay - dep_delay) %>% arrange(desc(time.gained))
hist(flights$time.gained)
mean(flights$gain, na.rm = TRUE)
mean(flights$time.gain, na.rm = TRUE)
mean(flights$time.gained, na.rm = TRUE)
to.sea <- flights %>% select(origin, dest, time.gained) %>% filter(dest == "SEA")
to.sea
mean(to.sea$time.gained, na.rm = TRUE)
# Exercise 4: DPLYR and flights data
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# use `??flights` to search for documentation on the data set (for what cols are)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time gained in the air
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data.frame descending by the column you just created.
# Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time.gained))
View(head(flights))
# For practice, repeat the last 2 steps in a single statement using the pipe operator
flights <- flights %>% mutate(time.gained = arr_delay - dep_delay) %>% arrange(desc(time.gained))
# Make a histogram of the amount of gain using the `hist()` function
hist(flights$time.gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time.gained, na.rm = TRUE)
# Create a data.frame of flights headed to seatac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- flights %>% select(origin, dest, time.gained) %>% filter(dest == "SEA")
to.sea
# On average, did flights to seatac gain or loose time?
mean(to.sea$time.gained, na.rm = TRUE) # Lose
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement!
# (and don't show any other data)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarize(
average.air.time = mean(air_time, na.rm = TRUE),
max.air.time = max(air_time, na.rm = TRUE),
min.air.time = min(air_time, na.rm = TRUE)
)
install.packages('httr')
library('httr')
GET("https://ischool.uw.edu/")
GET('https://google.com/search', query = query.params)
query.params <- list(q = 'informatics')
GET('https://google.com/search', query = query.params)
library('httr')
install.packages('jsonlite')
library('jsonlite')
response <- GET("http://data.unhcr.org/api/stats/time_series_years.json")
body <- content(response,"text")
years <- fromJSON(body)
years
# What is the "country code" for the "Syrian Arab Republic"?
response <- GET("http://data.unhcr.org/api/countries/list.json")
countries <- fromJSON(content(response, 'text'))
filter(countries, name_en == 'Syrian Arab Republic') %>%
select(country_code)
# Load the httr and jsonlite libraries for accessing data
library('httr')
install.packages('jsonlite')
library('jsonlite')
library(dplyr)
## For these questions, look at the API documentation to identify the appropriate endpoint and information.
## Then send GET() request to fetch the data, then extract the answer to the question
# For what years does the API have statistical data?
response <- GET("http://data.unhcr.org/api/stats/time_series_years.json")
body <- content(response,"text")
years <- fromJSON(body)
years
# What is the "country code" for the "Syrian Arab Republic"?
response <- GET("http://data.unhcr.org/api/countries/list.json")
countries <- fromJSON(content(response, 'text'))
filter(countries, name_en == 'Syrian Arab Republic') %>%
select(country_code)
# How many persons of concern from Syria applied for residence in the USA in 2013?
# Hint: you'll need to use a query parameter
# Use the `str()` function to print the data of interest
# See http://www.unhcr.org/en-us/who-we-help.html for details on these terms
install.packages("jsonlite")
t is the "country code" for the "Syrian Arab Republic"?
response <- GET("http://data.unhcr.org/api/countries/list.json")
countries <- fromJSON(content(response, 'text'))
filter(countries, name_en == 'Syrian Arab Republic') %>%
select(country_code)
install.packages("shiny")
library("shiny")
shinyApp(ui = my.ui, sever = my.server)
shinyApp(ui = my.ui, server = my.server)
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library('ggplot2')
library('dplyr')
diamonds.sample <- sample_n('diamonds', 3000)
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library('ggplot2')
library('dplyr')
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
range('price')
range(diamonds$price)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jackjohnsinclair',
token='664288FE87636907151E3570BE2F12AC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jackjohnsinclair',
token='664288FE87636907151E3570BE2F12AC',
secret='dmWw8k4S5LA0Md9bAAzoaajwWhikANjiXwltoyUs')
runApp('Desktop/info201/Modules/module15-shiny/exercise-2')
runApp('Desktop/info201/Modules/module15-shiny/exercise-2')
runApp('Desktop/info201/Modules/module15-shiny/exercise-2')
shiny::runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
View(iris)
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
runApp('Desktop/info201/Assignments/a8-data-app-jackjohnsinclair')
setwd("~/Desktop/info201/Assignments/ad3final")
shiny::runApp()
runApp()
